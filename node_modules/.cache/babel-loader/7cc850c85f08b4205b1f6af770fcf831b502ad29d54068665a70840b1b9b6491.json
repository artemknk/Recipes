{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { RecipeBuilder } from \"./chunk\";\nexport const initialState = {\n  recipes: [],\n  filterRecipes: [],\n  error: null,\n  loading: false,\n  currentRecipe: null\n};\nexport const recipesSlice = createSlice({\n  name: \"recipes\",\n  initialState,\n  reducers: {\n    setFilterRecipes: (state, action) => {\n      state.filterRecipes = action.payload === 'All' ? state.recipes : state.recipes.filter(recipe => recipe.tags.includes(action.payload));\n    },\n    setSearchRecipes: (state, action) => {\n      state.filterRecipes = action.payload ? state.recipes.filter(recipe => recipe.title.toLowerCase().includes(action.payload.toLowerCase())) : state.recipes;\n    }\n  },\n  // изменение состояния\n  selectors: {\n    getStateFilterRecipes: state => state.filterRecipes\n  },\n  extraReducers: RecipeBuilder // изменения состояния в процессе выполнения асинхроного кода\n});\nexport default recipesSlice.reducer;\nexport const {\n  setFilterRecipes,\n  setSearchRecipes\n} = recipesSlice.actions;\nexport const {\n  getStateFilterRecipes\n} = recipesSlice.selectors;","map":{"version":3,"names":["createSlice","RecipeBuilder","initialState","recipes","filterRecipes","error","loading","currentRecipe","recipesSlice","name","reducers","setFilterRecipes","state","action","payload","filter","recipe","tags","includes","setSearchRecipes","title","toLowerCase","selectors","getStateFilterRecipes","extraReducers","reducer","actions"],"sources":["/Users/artemknk/Documents/GitHub/hexlet-git/React App/src/Redux/Recipes/index.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { RecipeBuilder } from \"./chunk\";\n\nexport const initialState = {\n  recipes : [],\n  filterRecipes : [],\n  error: null,\n  loading: false,\n  currentRecipe: null\n}\n\nexport const recipesSlice = createSlice({\n  name: \"recipes\",\n  initialState,\n  reducers: {\n    setFilterRecipes : (state, action) => {\n      state.filterRecipes = action.payload === 'All' \n        ? state.recipes \n        : state.recipes.filter(recipe => recipe.tags.includes(action.payload));\n    },\n    setSearchRecipes : (state, action) => {\n      state.filterRecipes = action.payload ? state.recipes.filter(recipe => recipe.title.toLowerCase().includes(action.payload.toLowerCase())) : state.recipes\n    }\n  }, // изменение состояния\n  selectors: {\n    getStateFilterRecipes: (state) => state.filterRecipes,\n\n  },\n  extraReducers: RecipeBuilder, // изменения состояния в процессе выполнения асинхроного кода\n});\n\nexport default recipesSlice.reducer;\nexport const { setFilterRecipes, setSearchRecipes } = recipesSlice.actions;\nexport const { getStateFilterRecipes } = recipesSlice.selectors;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,aAAa,QAAQ,SAAS;AAEvC,OAAO,MAAMC,YAAY,GAAG;EAC1BC,OAAO,EAAG,EAAE;EACZC,aAAa,EAAG,EAAE;EAClBC,KAAK,EAAE,IAAI;EACXC,OAAO,EAAE,KAAK;EACdC,aAAa,EAAE;AACjB,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGR,WAAW,CAAC;EACtCS,IAAI,EAAE,SAAS;EACfP,YAAY;EACZQ,QAAQ,EAAE;IACRC,gBAAgB,EAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;MACpCD,KAAK,CAACR,aAAa,GAAGS,MAAM,CAACC,OAAO,KAAK,KAAK,GAC1CF,KAAK,CAACT,OAAO,GACbS,KAAK,CAACT,OAAO,CAACY,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACC,IAAI,CAACC,QAAQ,CAACL,MAAM,CAACC,OAAO,CAAC,CAAC;IAC1E,CAAC;IACDK,gBAAgB,EAAGA,CAACP,KAAK,EAAEC,MAAM,KAAK;MACpCD,KAAK,CAACR,aAAa,GAAGS,MAAM,CAACC,OAAO,GAAGF,KAAK,CAACT,OAAO,CAACY,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACI,KAAK,CAACC,WAAW,CAAC,CAAC,CAACH,QAAQ,CAACL,MAAM,CAACC,OAAO,CAACO,WAAW,CAAC,CAAC,CAAC,CAAC,GAAGT,KAAK,CAACT,OAAO;IAC1J;EACF,CAAC;EAAE;EACHmB,SAAS,EAAE;IACTC,qBAAqB,EAAGX,KAAK,IAAKA,KAAK,CAACR;EAE1C,CAAC;EACDoB,aAAa,EAAEvB,aAAa,CAAE;AAChC,CAAC,CAAC;AAEF,eAAeO,YAAY,CAACiB,OAAO;AACnC,OAAO,MAAM;EAAEd,gBAAgB;EAAEQ;AAAiB,CAAC,GAAGX,YAAY,CAACkB,OAAO;AAC1E,OAAO,MAAM;EAAEH;AAAsB,CAAC,GAAGf,YAAY,CAACc,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
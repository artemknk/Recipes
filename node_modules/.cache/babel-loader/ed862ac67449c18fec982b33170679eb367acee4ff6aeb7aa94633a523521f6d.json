{"ast":null,"code":"import { createAsyncThunk } from \"@reduxjs/toolkit\"; // функция для создания асинзронных thunks (переходов, действий)\nimport { api } from \"../../Api\";\n\n// thunk для получения рецептов\n// Код создает асинхронный thunk с именем getRecipesChunk с помощью createAsyncThunk. Запрос имеет тип \"recipes/getRecipes\" и вызывает метод api.getRecipes() при отправке.\n\nexport const getRecipesChunk = createAsyncThunk(\"recipes/getRecipes\", () => api.getRecipes());\nexport const getSingleRecipeChunk = createAsyncThunk(\"recipes/getSingleRecipe\", id => api.getSingleRecipe(id));\n// Этот модуль будет обрабатывать асинхронную операцию извлечения рецептов из API.\n\n//Определение конструктора рецептов\n\n// В коде определена функция RecipeBuilder, которая принимает объект конструктора в качестве аргумента. Этот объект builder, скорее всего, является частью редуктора Redux и используется для определения того, как должно изменяться состояние в ответ на различные действия.\nexport const RecipeBuilder = builder => {\n  builder.addCase(getRecipesChunk.pending, state => {\n    // Pending: Когда выполнение запроса getRecipesChunk находится в ожидании (т.е. выполняется запрос API), состояние обновляется, чтобы установить значение loading равным true, а значение error равным null.\n    state.loading = true;\n    state.error = null;\n  }).addCase(getRecipesChunk.fulfilled, (state, action) => {\n    // Fulfilled: Когда выполняется команда getRecipesChunk (т.е. запрос API выполняется успешно), состояние обновляется, чтобы установить для recipes значение полезной нагрузки, для loading значение false, а для error значение null.\n    state.recipes = action.payload.recipes;\n    state.loading = false;\n  }).addCase(getRecipesChunk.rejected, (state, action) => {\n    // Rejected: Когда функция getRecipesChunk отклоняется (т.е. запрос API завершается ошибкой), состояние обновляется, чтобы присвоить сообщению об ошибке значение error, loading значение false, а recipes - пустой массив.\n    state.error = action.error.message;\n    state.loading = false;\n    state.recipes = [];\n  })\n  // Определяя эти случаи, функция RecipeBuilder определяет, как должно изменяться состояние в ответ на различные этапы выполнения команды getRecipesChunk.\n  .addCase(getSingleRecipeChunk.pending, state => {\n    state.loading = true;\n    state.error = null;\n    state.currentRecipe = null;\n  }).addCase(getSingleRecipeChunk.fulfilled, (state, action) => {\n    state.currentRecipe = action.payload;\n    state.loading = false;\n  }).addCase(getSingleRecipeChunk.rejected, (state, action) => {\n    state.error = action.error.message;\n    state.loading = false;\n    state.currentRecipe = null;\n  });\n};\n_c = RecipeBuilder;\nvar _c;\n$RefreshReg$(_c, \"RecipeBuilder\");","map":{"version":3,"names":["createAsyncThunk","api","getRecipesChunk","getRecipes","getSingleRecipeChunk","id","getSingleRecipe","RecipeBuilder","builder","addCase","pending","state","loading","error","fulfilled","action","recipes","payload","rejected","message","currentRecipe","_c","$RefreshReg$"],"sources":["/Users/artemknk/Documents/GitHub/hexlet-git/React App/src/Redux/Recipes/chunk.js"],"sourcesContent":["import { createAsyncThunk } from \"@reduxjs/toolkit\"; // функция для создания асинзронных thunks (переходов, действий)\nimport { api } from \"../../Api\";\n\n// thunk для получения рецептов\n// Код создает асинхронный thunk с именем getRecipesChunk с помощью createAsyncThunk. Запрос имеет тип \"recipes/getRecipes\" и вызывает метод api.getRecipes() при отправке.\n\nexport const getRecipesChunk = createAsyncThunk(\n  \"recipes/getRecipes\",\n  () => api.getRecipes()\n)\n\nexport const getSingleRecipeChunk = createAsyncThunk(\n  \"recipes/getSingleRecipe\",\n  (id) => api.getSingleRecipe(id)\n)\n// Этот модуль будет обрабатывать асинхронную операцию извлечения рецептов из API.\n\n//Определение конструктора рецептов\n\n// В коде определена функция RecipeBuilder, которая принимает объект конструктора в качестве аргумента. Этот объект builder, скорее всего, является частью редуктора Redux и используется для определения того, как должно изменяться состояние в ответ на различные действия.\nexport const RecipeBuilder = (builder) => {\n  builder.addCase(getRecipesChunk.pending, (state) => {\n    // Pending: Когда выполнение запроса getRecipesChunk находится в ожидании (т.е. выполняется запрос API), состояние обновляется, чтобы установить значение loading равным true, а значение error равным null.\n    state.loading = true;\n    state.error = null;\n  }).addCase(getRecipesChunk.fulfilled, (state, action) => {\n    // Fulfilled: Когда выполняется команда getRecipesChunk (т.е. запрос API выполняется успешно), состояние обновляется, чтобы установить для recipes значение полезной нагрузки, для loading значение false, а для error значение null.\n    state.recipes = action.payload.recipes;\n    state.loading = false;\n  }).addCase(getRecipesChunk.rejected, (state, action) => {\n    // Rejected: Когда функция getRecipesChunk отклоняется (т.е. запрос API завершается ошибкой), состояние обновляется, чтобы присвоить сообщению об ошибке значение error, loading значение false, а recipes - пустой массив.\n    state.error = action.error.message;\n    state.loading = false;\n    state.recipes = [];\n  })\n  // Определяя эти случаи, функция RecipeBuilder определяет, как должно изменяться состояние в ответ на различные этапы выполнения команды getRecipesChunk.\n\n  .addCase(getSingleRecipeChunk.pending, (state) => {\n    state.loading = true;\n    state.error = null;\n    state.currentRecipe = null;\n  }).addCase(getSingleRecipeChunk.fulfilled, (state, action) => {\n    state.currentRecipe = action.payload;\n    state.loading = false;\n  }).addCase(getSingleRecipeChunk.rejected, (state, action) => {\n    state.error = action.error.message;\n    state.loading = false;\n    state.currentRecipe = null;\n  })\n}"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,kBAAkB,CAAC,CAAC;AACrD,SAASC,GAAG,QAAQ,WAAW;;AAE/B;AACA;;AAEA,OAAO,MAAMC,eAAe,GAAGF,gBAAgB,CAC7C,oBAAoB,EACpB,MAAMC,GAAG,CAACE,UAAU,CAAC,CACvB,CAAC;AAED,OAAO,MAAMC,oBAAoB,GAAGJ,gBAAgB,CAClD,yBAAyB,EACxBK,EAAE,IAAKJ,GAAG,CAACK,eAAe,CAACD,EAAE,CAChC,CAAC;AACD;;AAEA;;AAEA;AACA,OAAO,MAAME,aAAa,GAAIC,OAAO,IAAK;EACxCA,OAAO,CAACC,OAAO,CAACP,eAAe,CAACQ,OAAO,EAAGC,KAAK,IAAK;IAClD;IACAA,KAAK,CAACC,OAAO,GAAG,IAAI;IACpBD,KAAK,CAACE,KAAK,GAAG,IAAI;EACpB,CAAC,CAAC,CAACJ,OAAO,CAACP,eAAe,CAACY,SAAS,EAAE,CAACH,KAAK,EAAEI,MAAM,KAAK;IACvD;IACAJ,KAAK,CAACK,OAAO,GAAGD,MAAM,CAACE,OAAO,CAACD,OAAO;IACtCL,KAAK,CAACC,OAAO,GAAG,KAAK;EACvB,CAAC,CAAC,CAACH,OAAO,CAACP,eAAe,CAACgB,QAAQ,EAAE,CAACP,KAAK,EAAEI,MAAM,KAAK;IACtD;IACAJ,KAAK,CAACE,KAAK,GAAGE,MAAM,CAACF,KAAK,CAACM,OAAO;IAClCR,KAAK,CAACC,OAAO,GAAG,KAAK;IACrBD,KAAK,CAACK,OAAO,GAAG,EAAE;EACpB,CAAC;EACD;EAAA,CAECP,OAAO,CAACL,oBAAoB,CAACM,OAAO,EAAGC,KAAK,IAAK;IAChDA,KAAK,CAACC,OAAO,GAAG,IAAI;IACpBD,KAAK,CAACE,KAAK,GAAG,IAAI;IAClBF,KAAK,CAACS,aAAa,GAAG,IAAI;EAC5B,CAAC,CAAC,CAACX,OAAO,CAACL,oBAAoB,CAACU,SAAS,EAAE,CAACH,KAAK,EAAEI,MAAM,KAAK;IAC5DJ,KAAK,CAACS,aAAa,GAAGL,MAAM,CAACE,OAAO;IACpCN,KAAK,CAACC,OAAO,GAAG,KAAK;EACvB,CAAC,CAAC,CAACH,OAAO,CAACL,oBAAoB,CAACc,QAAQ,EAAE,CAACP,KAAK,EAAEI,MAAM,KAAK;IAC3DJ,KAAK,CAACE,KAAK,GAAGE,MAAM,CAACF,KAAK,CAACM,OAAO;IAClCR,KAAK,CAACC,OAAO,GAAG,KAAK;IACrBD,KAAK,CAACS,aAAa,GAAG,IAAI;EAC5B,CAAC,CAAC;AACJ,CAAC;AAAAC,EAAA,GA7BYd,aAAa;AAAA,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}